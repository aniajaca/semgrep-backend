                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 53 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                
  [36m[22m[24m  src/server.js[0m
     ‚ù± javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage
          A CSRF middleware was not detected in your express application. Ensure you are either using one such
          as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your    
          routes with a token or cookies.                                                                     
          Details: https://sg.run/BxzR                                                                        
                                                                                                              
            8‚îÜ const app = express();
   
    ‚ùØ‚ù± javascript.express.security.cors-misconfiguration.cors-misconfiguration
          By letting user input control CORS parameters, there is a risk that software does not properly 
          verify that the source of data or communication is valid. Use literal values for CORS settings.
          Details: https://sg.run/nKXO                                                                   
                                                                                                         
           58‚îÜ res.setHeader('Access-Control-Allow-Origin', origin || '*');
   
     ‚ù± javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          504‚îÜ console.log(`Processing finding at line ${lineNumber}:`, vulnerableLine.substring(0, 100));
                          
  [36m[22m[24m  test.py[0m
    ‚ùØ‚ù± python.lang.security.audit.md5-used-as-password.md5-used-as-password
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as scrypt. You can use `hashlib.scrypt`.                                                       
          Details: https://sg.run/5DwD                                                                        
                                                                                                              
            8‚îÜ return hashlib.md5(password.encode()).hexdigest()
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           18‚îÜ return conn.execute(query).fetchone()
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           18‚îÜ return conn.execute(query).fetchone()
                                   
  [36m[22m[24m  test2_lovable.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.md5-used-as-password.md5-used-as-password
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as bcrypt. You can use the `bcrypt` node.js package.                                           
          Details: https://sg.run/GOEn                                                                        
                                                                                                              
           28‚îÜ return crypto.createHash('md5').update(password).digest('hex');
   
    ‚ùØ‚ù± javascript.lang.security.audit.sqli.node-mysql-sqli.node-mysql-sqli
          Detected a `mysql` SQL statement that comes from a function argument. This could lead to SQL       
          injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL
          injection, it is recommended to use parameterized queries or prepared statements.                  
          Details: https://sg.run/Y0oy                                                                       
                                                                                                             
           46‚îÜ connection.query(query, (error, results) => {
   
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-child-process.detect-child-process
          Detected calls to child_process from a function argument `customerId`. This could lead to a command
          injection if the input is user controllable. Try to avoid calls to child_process, and if it is     
          needed ensure user input is correctly sanitized or sandboxed.                                      
          Details: https://sg.run/l2lo                                                                       
                                                                                                             
           76‚îÜ exec(command, (error, stdout, stderr) => {
            ‚ãÆ‚îÜ----------------------------------------
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-child-process.detect-child-process
          Detected calls to child_process from a function argument `outputFormat`. This could lead to a      
          command injection if the input is user controllable. Try to avoid calls to child_process, and if it
          is needed ensure user input is correctly sanitized or sandboxed.                                   
          Details: https://sg.run/l2lo                                                                       
                                                                                                             
           76‚îÜ exec(command, (error, stdout, stderr) => {
            ‚ãÆ‚îÜ----------------------------------------
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-child-process.detect-child-process
          Detected calls to child_process from a function argument `reportType`. This could lead to a command
          injection if the input is user controllable. Try to avoid calls to child_process, and if it is     
          needed ensure user input is correctly sanitized or sandboxed.                                      
          Details: https://sg.run/l2lo                                                                       
                                                                                                             
           76‚îÜ exec(command, (error, stdout, stderr) => {
            ‚ãÆ‚îÜ----------------------------------------
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-child-process.detect-child-process
          Detected calls to child_process from a function argument `backupPath`. This could lead to a command
          injection if the input is user controllable. Try to avoid calls to child_process, and if it is     
          needed ensure user input is correctly sanitized or sandboxed.                                      
          Details: https://sg.run/l2lo                                                                       
                                                                                                             
           90‚îÜ exec(`${backupCommand} && ${compressionCommand}`, { shell: true });
            ‚ãÆ‚îÜ----------------------------------------
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-child-process.detect-child-process
          Detected calls to child_process from a function argument `customerId`. This could lead to a command
          injection if the input is user controllable. Try to avoid calls to child_process, and if it is     
          needed ensure user input is correctly sanitized or sandboxed.                                      
          Details: https://sg.run/l2lo                                                                       
                                                                                                             
           90‚îÜ exec(`${backupCommand} && ${compressionCommand}`, { shell: true });
            ‚ãÆ‚îÜ----------------------------------------
          114‚îÜ exec(`chmod +x ${uploadPath} && ${uploadPath}`);
            ‚ãÆ‚îÜ----------------------------------------
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-child-process.detect-child-process
          Detected calls to child_process from a function argument `fileName`. This could lead to a command
          injection if the input is user controllable. Try to avoid calls to child_process, and if it is   
          needed ensure user input is correctly sanitized or sandboxed.                                    
          Details: https://sg.run/l2lo                                                                     
                                                                                                           
          114‚îÜ exec(`chmod +x ${uploadPath} && ${uploadPath}`);
   
   ‚ùØ‚ùØ‚ù± javascript.browser.security.insecure-document-method.insecure-document-method
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          121‚îÜ document.getElementById('customerName').innerHTML = customerData.fullName;
            ‚ãÆ‚îÜ----------------------------------------
          122‚îÜ document.getElementById('searchResults').innerHTML = `<h3>Search: ${userInput}</h3>`;
            ‚ãÆ‚îÜ----------------------------------------
          128‚îÜ document.getElementById('notifications').innerHTML = `<div class="alert">${message}</div>`;
            ‚ãÆ‚îÜ----------------------------------------
          133‚îÜ document.getElementById('customerNotes').innerHTML = customerNotes;
   
    ‚ùØ‚ù± javascript.browser.security.eval-detected.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/7ope                                                                     
                                                                                                           
          143‚îÜ eval(customerSession.callback); // Extremely dangerous
   
     ‚ù± javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage
          A CSRF middleware was not detected in your express application. Ensure you are either using one such
          as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your    
          routes with a token or cookies.                                                                     
          Details: https://sg.run/BxzR                                                                        
                                                                                                              
          150‚îÜ const app = express();
                           
  [36m[22m[24m  test4.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           24‚îÜ cursor = conn.execute(sql)
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           24‚îÜ cursor = conn.execute(sql)
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           37‚îÜ result = database.execute(query)
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           37‚îÜ result = database.execute(query)
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           48‚îÜ stored_hash = conn.execute(sql).fetchone()
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           48‚îÜ stored_hash = conn.execute(sql).fetchone()
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           93‚îÜ conn.execute(update_sql)
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           93‚îÜ conn.execute(update_sql)
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          119‚îÜ return conn.execute(sql).fetchall()
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          119‚îÜ return conn.execute(sql).fetchall()
   
    ‚ùØ‚ù± python.lang.security.audit.md5-used-as-password.md5-used-as-password
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as scrypt. You can use `hashlib.scrypt`.                                                       
          Details: https://sg.run/5DwD                                                                        
                                                                                                              
          125‚îÜ new_hash = hashlib.md5(new_password.encode()).hexdigest()
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          129‚îÜ conn.execute(sql)
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          129‚îÜ conn.execute(sql)
                                  
  [36m[22m[24m  test_lovable.js[0m
   ‚ùØ‚ùØ‚ù± javascript.browser.security.insecure-document-method.insecure-document-method
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
            7‚îÜ document.getElementById('content').innerHTML = userData; // Direct HTML injection
   
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-child-process.detect-child-process
          Detected calls to child_process from a function argument `filename`. This could lead to a command
          injection if the input is user controllable. Try to avoid calls to child_process, and if it is   
          needed ensure user input is correctly sanitized or sandboxed.                                    
          Details: https://sg.run/l2lo                                                                     
                                                                                                           
           13‚îÜ exec(`cat ${filename}`, (error, stdout) => { // User input in command
                                          
  [36m[22m[24m  test_vulnerabilities.py[0m
    ‚ùØ‚ù± python.lang.security.audit.md5-used-as-password.md5-used-as-password
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as scrypt. You can use `hashlib.scrypt`.                                                       
          Details: https://sg.run/5DwD                                                                        
                                                                                                              
            7‚îÜ password_hash = hashlib.md5("password123".encode()).hexdigest()
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           14‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           14‚îÜ cursor.execute(query)
                                     
  [36m[22m[24m  tests/http_test.js[0m
   ‚ùØ‚ùØ‚ù± typescript.react.security.react-insecure-request.react-insecure-request
          Unencrypted request over HTTP detected.
          Details: https://sg.run/1n0b           
                                                 
            2‚îÜ fetch("http://example.com");
                                     
  [36m[22m[24m  tests/http_test.py[0m
   ‚ùØ‚ùØ‚ù± python.requests.security.disabled-cert-validation.disabled-cert-validation
          Certificate verification has been explicitly disabled. This permits insecure connections to insecure
          servers. Re-enable certification validation.                                                        
          Details: https://sg.run/AlYp                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ requests.get("http://example.com", verify=True)
            2‚îÜ requests.get("http://example.com", verify=False)
   
     ‚ù± python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
            2‚îÜ requests.get("http://example.com", verify=False)
                          
  [36m[22m[24m  vuln.go[0m
    ‚ùØ‚ù± go.lang.security.audit.crypto.math_random.math-random-used
          Do not use `math/rand`. Use `crypto/rand` instead.
          Details: https://sg.run/6nK6                      
                                                            
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ crypto/rand
           10‚îÜ "math/rand" // bad RNG
   
    ‚ùØ‚ù± go.lang.security.audit.database.string-formatted-query.string-formatted-query
          String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized
          properly. Audit this call to ensure the SQL is not manipulable by external data.                    
          Details: https://sg.run/ydEr                                                                        
                                                                                                              
           25‚îÜ query := fmt.Sprintf("SELECT * FROM users WHERE id = %s", userInput)
   
   ‚ùØ‚ùØ‚ù± go.lang.security.audit.sqli.gosql-sqli.gosql-sqli
          Detected string concatenation with a non-literal variable in a "database/sql" Go SQL statement. This
          could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order 
          to prevent SQL injection, use parameterized queries or prepared statements instead. You can use     
          prepared statements with the 'Prepare' and 'PrepareContext' calls.                                  
          Details: https://sg.run/YgOX                                                                        
                                                                                                              
           33‚îÜ rows, err := db.Query(query)
   
    ‚ùØ‚ù± go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion
          `MinVersion` is missing from this TLS configuration.  By default, TLS 1.2 is currently used as the
          minimum when acting as a client, and TLS 1.0 when acting as a server. General purpose web         
          applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known 
          that a web server must support legacy clients with unsupported an insecure browsers (such as      
          Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: 
          tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3.                
          Details: https://sg.run/oxEN                                                                      
                                                                                                            
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ tls.Config{ InsecureSkipVerify: true, MinVersion: tls.VersionTLS13 }
           49‚îÜ TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
   
    ‚ùØ‚ù± problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification.bypass-tls-verification
          Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging
          purposes because it leads to vulnerability to MTM attacks.                                      
          Details: https://sg.run/4xj5                                                                    
                                                                                                          
           49‚îÜ TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
   
    ‚ùØ‚ù± go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5
          Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.               
          Details: https://sg.run/2xB5                                                                   
                                                                                                         
           64‚îÜ hash := md5.Sum(data)
                            
  [36m[22m[24m  vuln.java[0m
    ‚ùØ‚ù± java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request
          Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL
          injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL      
          queries or properly sanitize user input instead.                                                   
          Details: https://sg.run/Lg56                                                                       
                                                                                                             
           22‚îÜ Statement stmt = conn.createStatement();
           23‚îÜ ResultSet rs = stmt.executeQuery(query);
            ‚ãÆ‚îÜ----------------------------------------
           23‚îÜ ResultSet rs = stmt.executeQuery(query);
   
    ‚ùØ‚ù± java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli
          Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the
          SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement)    
          instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.                    
          Details: https://sg.run/AvkL                                                                        
                                                                                                              
           23‚îÜ ResultSet rs = stmt.executeQuery(query);
   
    ‚ùØ‚ù± java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
          Detected a request with potential user-input going into a OutputStream or Writer object. This      
          bypasses any view or template environments, including HTML escaping, which may expose this         
          application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as
          JavaServer Faces (JSFs) which automatically escapes HTML views.                                    
          Details: https://sg.run/KlRL                                                                       
                                                                                                             
           27‚îÜ response.getWriter().println("Hello, " + username);
   
    ‚ùØ‚ù± java.lang.security.audit.crypto.use-of-md5.use-of-md5
          Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use HMAC instead.                         
          Details: https://sg.run/ryJn                                                                   
                                                                                                         
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ "SHA-512"
           36‚îÜ MessageDigest md = MessageDigest.getInstance("MD5");

